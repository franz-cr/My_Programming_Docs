I.	Instalar Git Bash:
	A.	Bajar el instalador con el enlace "Downloads for Windows" desde:
		>	https://git-scm.com/
	B.	Chequear este video:
		>	https://www.youtube.com/watch?v=albr1o7Z1nw
	C.	Correr el instalador:
		1.	Aceptar los términos de la licencia.
		2.	Aceptar el directorio de instalación por defecto.
		3.	Seleccionar la creación del ícono en el escritorio.
		4.	Permitir crear una carpeta en el menú de inicio.
		5.	Seleccionar "Use Git from Git Bash only".
		6.	Seleccionar "Checkout Windows-style, commit Unix-style ...".
		7.	Seleccionar "Use MinTTY ...".
		8.	En las opciones extra dejar las opciones por defecto.
	D.	Abrir Bash:
		1.	Probar los comandos básicos:
			>	Mostrar el directorio activo completo: 'pwd'
			>	Mostrar contenido de directorio: 'dir' or 'ls' or 'ls -la'
			>	Cambiar directorio: 'cd C:' o 'cd /c', 'cd Program\ Files', 
			>	Subir 1 nivel de directorio: 'cd ..', 
			>	Crear una carpeta 'mkdir [nombre_carpeta]'
			>	Crear un archivo de texto, 
			>	Desplegar el histórico de commandos tecleados: 'history'.

			>	Salir de bash y cerrar command prompt: 'exit'.
		2.	Configurar Git desde el Bash:
			>	Nombre: 'git config --global user.name "My Name"'
			>	Email: 'git config --global user.email "email@server.com"'
			>	Editor: 'git config --global core.editor editorName'
			>	Chequear configuración: 'git config --list'
			>	La lista completa de configuraciones está al final de este archivo.
II.	Uso de Git. Ref: https://git-scm.com/docs o en español: https://help.github.com/es/github
	A.	Obtener ayuda:
		1.	Teclear: 'git help [comando]'
		2.	Teclear: 'git [comando] --help'
	B.	Clonar un repositorio desde 'Git Hub'
		1.	Abrir en Chrome: 'https://github.com/franz-cr'.
		2.	Seleccionar un repositorio, y cliquear en 'Clone or download'.
		3.	Al lado del URL cliquear para copiar al portapapeles (memoria).
		4.	Navegar a la carpeta base local para los proyectos de desarrollo.
		4.	Clonar el repositorio localmente:
			>	'git clone https://github.com/franz-cr/myRepository.git'
			>	Git crea el repositorio como una subcarpeta de la carpeta base.
	C.	Inicializar un repositorio:
		1.	Navegar hasta la carpeta del proyecto a respaldar.	
		2.	Teclear: 'git init'
	D.	Estado del repositorio:
		1.	git status
	E.	Historial:
		1.	git log --oneline
		2.	git log --graph --all
	F.	Comandos:
		>	file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc/git-branch.html
		>	git branch 
	G.	Agregar archivos:
		1.	git add -A (All, agrega todos los archivos y carpetas).
		2.	git add -u :/ 
			// adds all modified file changes to the stage 
			git add * :/ 
			// adds modified and any new files (that's not gitignore'ed) to the stage
	H.	Aplicar cambios al repositorio:
		1.	git commit -a, 
		2.	Git Commit Style Guide:
			http://udacity.github.io/git-styleguide/
		3.	Se abre 'Sublime Text' automáticamente:
			>	Agregar la nota del commit usando el formato de Udacity
			>	Guardar el archivo ('Save')
			>	Cerrar la pestaña en 'Sublime'
			>	El commit continúa en Git Bash
	I.	Subir cambios al repositorio en la nube:
		1.	git push -u origin master
	J.	Verificar configuración de un repositorio local:
		1.	Navegar hasta la carpeta del repositorio local con 'cd (...)'.
		2.	Verificar que el repositorio este inicializado, con 'dir'.
			Se debe ver una carpeta '.git'
		3.	Usar el comando 'git remote' para verificar configuración.
			La ayuda con el comando se despliega con 'git help remote'.
				git remote show
				git remote get-url --all origin
	H.	Crear un repositorio local, crear el primer commit y crear el respectivo 
		repositorio en GitHub.
		1.	Navegar a GitHub, luego autenticarse.
		2.	Dar click en el '+' ubicado a la derecha del cintillo superior.
		3.	Indicar el nombre el repositorio y aceptar.
		4.	Abrir Git Bash, navegar a la carpeta con el repositorio a subir.
		5.	Seguir las siguientes instrucciones para sincronizar.
			echo "# JavaProjects" >> README.md
			git init
			git add README.md
			git commit -m "first commit"
			git remote add origin https://github.com/franz-cr/NombreRepositorio.git
			git push -u origin master
		6.	Ayuda: https://help.github.com/articles/creating-a-new-repository/
		7.  Ayuda: https://guides.github.com/introduction/git-handbook/#basic-git
				# create a new directory, and initialize it with git-specific functions
				git init my-repo

				# change into the `my-repo` directory
				cd my-repo

				# create the first file in the project
				touch README.md

				# git isn't aware of the file, stage it
				git add README.md

				# take a snapshot of the staging area
				git commit -m "add README to initial commit"

				# provide the path for the repository you created on github
				git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git
 
				# push changes to github
				git push --set-upstream origin master
III. Pasos para sincronizar un repositorio local con uno en GitHub ya existente
	1.	Desde "Git Bash" navegar a la carpeta.
		a.  cd C:\\Users\\ulrichca\\Documents\\Jupyter_Projects
	2.	Verificar el estado de los archivos en el repositorio con 'git status'.
		a.	Si retorna el mensaje 'Your branch is up-to-date with 'origin/master''.
			No hay más que hacer y se puede proceder a sincronizar los 'commits'.
		b.	Si retorna una lista de archivos en color rojo se deben incluir al 
			'stage' del 'commit' con 'git add -u :/' los archivos modificados. 
		c.	Incluir al stage del commit los archivos nuevos con 'git add --all'.
		c.	Ejecutar un status nuevamente, la lista debe ser verde ahora.
	3.	Comprometer archivos a sincronizar
		a.	Inluir archivos al 'commit' mediante 'git commit -a' 
			>	Se debe abrir Sublime para incluir el detalle del commit.
			>	Verificar que Sublime sea el editor por defecto 
			>	Detallar el commit en Sublime, ver en GitHub commit anterior.
			>	Salvar el texto y cerrar la pestaña o Sublime.
		b.	git commit -m "Tema: Mensaje descriptivo del commit"
	3.	Verificar que el repositorio local tenga uno remoto.
		a.	Mediante 'git remote show' obtener el nombre del 'path' o ruta.
		b.	Mediante 'git remote get-url origin' obtener el enlace al repositorio remoto.
		b.	Si no retorna enlace alguno es necesario agregar un enlace a un repositorio remoto.
			> Obtener enlace desde Github sea usando un reporsitorio ya existente o creando uno nuevo.
	4.	Sincronizar los 'commits' con el repositorio remoto.
		a.	git push -u origin master
	5.	Ejemplo de los comandos usados:
			79	git status
			80	git add The_Complete_Python_Data_Visualization_Course/data-viz/bokeh/Data_Visualization_Charts_bokeh_lib.ipynb
			81	git add The_Complete_Python_Data_Visualization_Course/data-viz/bokeh/log_lines.html
			82	git add The_Complete_Python_Data_Visualization_Course/.ipynb_checkpoints/
			83	git add The_Complete_Python_Data_Visualization_Course/Notebook_Tutorial.ipynb
			86	git log
			84	git commit -m "Features: New Jupyter notebooks added and renamed notebooks"
			84	git remote add origin https://github.com/franz-cr/Udacity-Intro_to_Java_Programming.git
			85	git status
			87	git remote status
			88	git push -u origin master
			89	git remote add origin https://github.com/franz-cr/Udacity-Intro_to_Java_Programming.git
			90	git push -u origin master
			91	exit
git commit -m "Feat: Latest changes to project as of 20200214"
IV.	

NOTAS:
	Valores de la configuración de Git al 20200312:
		$ git config --list
			core.symlinks=false
			core.autocrlf=true
			core.fscache=true
			color.diff=auto
			color.status=auto
			color.branch=auto
			color.interactive=true
			help.format=html
			http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
			diff.astextplain.textconv=astextplain
			rebase.autosquash=true
			filter.lfs.clean=git-lfs clean -- %f
			filter.lfs.smudge=git-lfs smudge -- %f
			filter.lfs.required=true
			credential.helper=manager
			user.name=Franz J. Ulrich
			user.email=franz.ulrich.cr@gmail.com
			core.editor='C:\Program Files (x86)\Sublime Text 3\sublime_text.exe' -w
			gui.recentrepo=C:/Users/ulrichca/JavaProjects/GameOfLife-Conway
			gui.recentrepo=C:/Users/ulrichca/JavaProjects/Udacity - Intro to Java Programming
			gui.recentrepo=C:/Users/ulrichca/Documents/Jupyter_Projects
			core.repositoryformatversion=0
			core.filemode=false
			core.bare=false
			core.logallrefupdates=true
			core.symlinks=false
			core.ignorecase=true
			remote.origin.url=https://github.com/franz-cr/My_Programming_Docs.git
			remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
			branch.master.remote=origin
			branch.master.merge=refs/heads/master
